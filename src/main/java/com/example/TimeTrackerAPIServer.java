package com.example;

import com.google.gson.Gson;
import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import spark.Spark;

import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.eclipse.jetty.websocket.api.Session;
import org.eclipse.jetty.websocket.api.annotations.*;

import static spark.Spark.*;

public class TimeTrackerAPIServer {
    private static final Logger logger = LoggerFactory.getLogger(TimeTrackerAPIServer.class);
    private static final int API_PORT = 4567;
    private static final Gson gson = new Gson();

    private static final double DEFAULT_HOURLY_RATE = 50000.0; 

    private static TimeTrackerClient zkClient;
    // SET ƒë·ªÉ l∆∞u tr·ªØ c√°c WebSocket Session ƒëang ho·∫°t ƒë·ªông (Dashboard)
    private static final Set<Session> activeSessions = Collections.synchronizedSet(new HashSet<>()); 
    // Scheduler ƒë·ªÉ g·ª≠i c·∫≠p nh·∫≠t tr·∫°ng th√°i WebSocket
    private static final ScheduledExecutorService broadcaster = Executors.newSingleThreadScheduledExecutor();

    // ‚≠ê C·∫•u tr√∫c D·ªØ li·ªáu Nh√¢n vi√™n Gi·∫£ l·∫≠p (Database)
    private static final Map<String, EmployeeInfo> employeeDatabase = new HashMap<>();

    private static class EmployeeInfo {
        String id;
        String name;
        String department;
        
        public EmployeeInfo(String id, String name, String department) {
            this.id = id;
            this.name = name;
            this.department = department;
        }
    }

    private static void initializeDatabase() {
        // Th√™m c√°c nh√¢n vi√™n v√†o database (ƒë·ªÉ lu√¥n hi·ªÉn th·ªã tr√™n Dashboard)
        employeeDatabase.put("TuanAnh", new EmployeeInfo("TuanAnh", "Tr·∫ßn Tu·∫•n Anh", "Dev"));
        employeeDatabase.put("MaiHoa", new EmployeeInfo("MaiHoa", "L√™ Mai Hoa", "Design"));
        employeeDatabase.put("QuocViet", new EmployeeInfo("QuocViet", "Nguy·ªÖn Qu·ªëc Vi·ªát", "Marketing"));
        employeeDatabase.put("XuanTruong", new EmployeeInfo("XuanTruong", "Ph·∫°m Xu√¢n Tr∆∞·ªùng", "Dev"));
        logger.info("ƒê√£ kh·ªüi t·∫°o Database gi·∫£ l·∫≠p v·ªõi {} nh√¢n vi√™n.", employeeDatabase.size());
    }

    // ‚≠ê WATCHER: L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi ZNode (Check-in/out)
    private static final Watcher statusChangeWatcher = event -> {
        if (event.getType() == Watcher.Event.EventType.NodeChildrenChanged) {
            logger.info("üì£ Zookeeper Event: NodeChildrenChanged t·∫°i {}", event.getPath());
            // G·ª≠i c·∫≠p nh·∫≠t Dashboard ngay l·∫≠p t·ª©c
            broadcaster.submit(TimeTrackerAPIServer::broadcastDashboardUpdate); 
            
            try {
                // L·∫ßn g·ªçi n√†y t√°i g·∫Øn Watcher cho ZNode g·ªëc
                zkClient.getActiveMembers(); 
            } catch (Exception e) {
                logger.error("L·ªói khi t√°i thi·∫øt l·∫≠p Watcher: {}", e.getMessage());
            }
        }
    };

    private static void broadcastDashboardUpdate() {
        String statusJson = getDetailedStatusJson();
        if (statusJson == null || statusJson.contains("\"status\":\"error\"")) {
            return; 
        }

        synchronized (activeSessions) {
            activeSessions.removeIf(session -> {
                try {
                    if (session.isOpen()) {
                        session.getRemote().sendString(statusJson);
                        return false; 
                    }
                } catch (Exception e) {
                    logger.warn("L·ªói khi g·ª≠i c·∫≠p nh·∫≠t qua WS: {}", e.getMessage());
                }
                return true; 
            });
        }
        logger.info("‚úÖ ƒê√£ g·ª≠i c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ªõi {} Dashboard.", activeSessions.size());
    }


    // ‚≠ê PH∆Ø∆†NG TH·ª®C M·ªöI: T·∫°o JSON tr·∫°ng th√°i chi ti·∫øt c·ªßa T·∫§T C·∫¢ nh√¢n vi√™n
    private static String getDetailedStatusJson() {
        List<Map<String, Object>> statusList = new ArrayList<>();
        
        try {
            // 1. L·∫•y danh s√°ch ID ƒëang ONLINE (c√≥ ZNode) t·ª´ ZooKeeper
            // L·ªánh n√†y c≈©ng t√°i g·∫Øn Watcher
            List<String> activeMemberIds = zkClient.getActiveMembers();
            
            // 2. Duy·ªát qua T·∫§T C·∫¢ nh√¢n vi√™n trong Database Gi·∫£ l·∫≠p
            for (EmployeeInfo info : employeeDatabase.values()) {
                Map<String, Object> memberStatus = new HashMap<>();
                
                // Ki·ªÉm tra ch√©o tr·∫°ng th√°i
                boolean isOnline = activeMemberIds.contains(info.id);
                
                memberStatus.put("id", info.id);
                memberStatus.put("name", info.name);
                memberStatus.put("department", info.department);
                memberStatus.put("status", isOnline ? "ONLINE" : "OFFLINE"); // G√ÅN TR·∫†NG TH√ÅI

                // X·ª≠ l√Ω d·ªØ li·ªáu chi ti·∫øt
                if (isOnline) {
                    byte[] dataBytes = zkClient.getMemberData(info.id);
                    String dataJson = new String(dataBytes, StandardCharsets.UTF_8);

                    Map<String, String> dataMap = gson.fromJson(dataJson, Map.class);
                    String startTimeStr = dataMap.get("startTime"); 

                    memberStatus.put("checkInTime", startTimeStr);
                    
                    LocalDateTime startTime = LocalDateTime.parse(startTimeStr, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
                    Duration duration = Duration.between(startTime, LocalDateTime.now());
                    long minutes = duration.toMinutes();
                    
                    memberStatus.put("minutesWorked", minutes);
                    memberStatus.put("estimatedSalary", (minutes / 60.0) * DEFAULT_HOURLY_RATE);
                } else {
                    // N·∫øu OFFLINE, g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh/tr·ªëng
                    memberStatus.put("checkInTime", "-");
                    memberStatus.put("minutesWorked", 0L);
                    memberStatus.put("estimatedSalary", 0.0);
                }

                statusList.add(memberStatus);
            }
            
            return gson.toJson(statusList);
            
        } catch (Exception e) {
            logger.error("L·ªói khi t·∫°o JSON tr·∫°ng th√°i chi ti·∫øt: {}", e.getMessage());
            return gson.toJson(Map.of("status", "error", "message", "L·ªói Server khi x·ª≠ l√Ω d·ªØ li·ªáu Zookeeper."));
        }
    }
    
    // ‚≠ê WEBSOCKET HANDLER ƒê·ªÇ QU·∫¢N L√ù K·∫æT N·ªêI
    @WebSocket
    public static class StatusWebSocketHandler {
        @OnWebSocketConnect
        public void onConnect(Session userSession) {
            activeSessions.add(userSession);
            logger.info("‚ûï WebSocket m·ªü: {} (T·ªïng: {})", userSession.getRemoteAddress(), activeSessions.size());
            try {
                // G·ª≠i tr·∫°ng th√°i ban ƒë·∫ßu ngay khi k·∫øt n·ªëi
                userSession.getRemote().sendString(getDetailedStatusJson());
            } catch (Exception e) {
                logger.error("L·ªói g·ª≠i tr·∫°ng th√°i ban ƒë·∫ßu qua WS: {}", e.getMessage());
            }
        }

        @OnWebSocketClose
        public void onClose(Session userSession, int statusCode, String reason) {
            activeSessions.remove(userSession);
            logger.info("‚ûñ WebSocket ƒë√≥ng: {} (T·ªïng: {})", userSession.getRemoteAddress(), activeSessions.size());
        }

        @OnWebSocketError
        public void onError(Session userSession, Throwable error) {
            logger.error("L·ªói WebSocket cho phi√™n {}: {}", userSession.getRemoteAddress(), error.getMessage());
        }
        
        @OnWebSocketMessage
        public void onMessage(Session userSession, String message) {
            // Kh√¥ng c·∫ßn x·ª≠ l√Ω message
        }
    }

    public static void main(String[] args) {
        
        initializeDatabase();
        
        // 1. Kh·ªüi t·∫°o v√† k·∫øt n·ªëi Zookeeper Client
        try {
            zkClient = new TimeTrackerClient("API_SERVER_WATCHER");
            // ‚≠ê TRUY·ªÄN statusChangeWatcher V√ÄO K·∫æT N·ªêI
            zkClient.connect(statusChangeWatcher); 
        } catch (Exception e) {
            logger.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi Zookeeper: {}", e.getMessage());
            return; 
        }

        // 2. C·∫•u h√¨nh Spark Server
        port(API_PORT);
        
        // C·∫•u h√¨nh CORS (quan tr·ªçng cho vi·ªác g·ªçi API t·ª´ HTML)
        options("/*", (request, response) -> {
            String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
            if (accessControlRequestHeaders != null) {
                response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
            }
            String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
            if (accessControlRequestMethod != null) {
                response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
            }
            return "OK";
        });
        before((request, response) -> response.header("Access-Control-Allow-Origin", "*"));

        // WebSocket endpoint
        webSocket("/ws/status", StatusWebSocketHandler.class);
        
        // API Check-in
        post("/api/checkin/:id", (request, response) -> {
            String userId = request.params(":id");
            if (!employeeDatabase.containsKey(userId)) {
                response.status(404);
                return gson.toJson(Map.of("message", "ID kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng."));
            }
            
            TimeTrackerClient client = new TimeTrackerClient(userId);
            try {
                client.connect(); // Client Check-in/out kh√¥ng c·∫ßn Watcher
                if (client.checkIn()) {
                    broadcaster.submit(TimeTrackerAPIServer::broadcastDashboardUpdate); 
                    response.status(200);
                    return gson.toJson(Map.of("message", "Check-in th√†nh c√¥ng."));
                } else {
                    response.status(409);
                    return gson.toJson(Map.of("message", "B·∫°n ƒë√£ Check-in r·ªìi."));
                }
            } catch (Exception e) {
                logger.error("L·ªói Check-in cho {}: {}", userId, e.getMessage());
                response.status(500);
                return gson.toJson(Map.of("message", "L·ªói Server Zookeeper."));
            } finally {
                client.close();
            }
        });
        
        // API Check-out
        post("/api/checkout/:id", (request, response) -> {
            String userId = request.params(":id");
            if (!employeeDatabase.containsKey(userId)) {
                response.status(404);
                return gson.toJson(Map.of("message", "ID kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng."));
            }
            
            TimeTrackerClient client = new TimeTrackerClient(userId);
            try {
                client.connect();
                if (client.checkOut()) {
                    broadcaster.submit(TimeTrackerAPIServer::broadcastDashboardUpdate); 
                    response.status(200);
                    return gson.toJson(Map.of("message", "Check-out th√†nh c√¥ng."));
                } else {
                    response.status(404);
                    return gson.toJson(Map.of("message", "B·∫°n ch∆∞a Check-in."));
                }
            } catch (Exception e) {
                logger.error("L·ªói Check-out cho {}: {}", userId, e.getMessage());
                response.status(500);
                return gson.toJson(Map.of("message", "L·ªói Server Zookeeper."));
            } finally {
                client.close();
            }
        });
        
        // API L·∫•y tr·∫°ng th√°i th·ªß c√¥ng (cho l·∫ßn t·∫£i ƒë·∫ßu ti√™n)
        get("/api/status", (request, response) -> {
            response.type("application/json");
            return getDetailedStatusJson();
        });


        // Th√™m Shutdown Hook 
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            if (zkClient != null) zkClient.close();
            broadcaster.shutdownNow();
            Spark.stop();
        }));
    }
}
